<?php

/**
 * @file
 * Contains eldrich.module.
 */


use Drupal\Core\Database\Database;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Node\Entity\Node;
use Drupal\eck\Entity\EckEntity;


function eldrich_entity_update(EntityInterface $entity) {
  if (in_array($entity->bundle(), ['campaign', 'gear_type'])) {
    \Drupal::service("router.builder")->rebuild();
  }
}

function eldrich_entity_insert(EntityInterface $entity) {
  if (in_array($entity->bundle(), ['campaign', 'gear_type'])) {
    \Drupal::service("router.builder")->rebuild();
  }
}

function eldrich_entity_presave(EntityInterface $entity) {
  // when Weapon Instances and Armor Instances are saved, title them.
  // Weapon Pattern: Short Weapon Name (Mod Shortnames) with [Smart Ammo features] Ammo Name

  if (($entity->getEntityType()->id() == 'instance')) {
    switch ($entity->bundle()) {
      case 'weapon_instance':
        // In the future we might want these to be manually altered, but
        // for the time being we'll always hard-code them.
        $entity->title = $entity->field_weapon->entity->label();
        break;
      case 'armor_instance':
        $entity->title = $entity->field_armor->entity->label();
        break;
      case 'morph':
        // If the morph instance is new, or the morph model has changed, update stuff.
        // If the morph isn't populated, copy over the data from its template model.
        if (!$entity->field_model->isEmpty()) {
          if ($entity->title->isEmpty()) {
            $entity->title = $entity->field_model->entity->label();
          }

          if ($entity->field_stats->isEmpty()) {
            $entity->field_stats = $entity->field_model->entity->field_stats->getValue();
          }

          // â€¦But always copy over the Synthetic flag.
          $entity->field_stats->synthetic = $entity->field_model->entity->field_stats->synthetic;

          if ($entity->field_traits->isEmpty()) {
            $entity->field_traits = $entity->field_model->entity->field_traits->getValue();
          }
          if ($entity->field_mobility_system->isEmpty()) {
            $entity->field_mobility_system = $entity->field_model->entity->field_mobility_system->getValue();
          }
          if ($entity->field_movement_speed->isEmpty()) {
            $entity->field_movement_speed = $entity->field_model->entity->field_movement_speed->getValue();
          }
          if ($entity->field_augmentations->isEmpty()) {
            $entity->field_augmentations = $entity->field_model->entity->field_augmentations->getValue();
          }
          if ($entity->field_skills->isEmpty()) {
            $entity->field_skills = $entity->field_model->entity->field_skills->getValue();
          }
        }
        break;
      case 'muse':
        // If the muse doesn't have any data, pre-populate it as a Standard Muse
        break;
    }
  }

  // This is terrible and a sign that I've failed as a human
  if ($entity->bundle() == 'creature') {
    if (!$entity->field_creature_type->isEmpty()) {
      $ct = $entity->field_creature_type->entity->label();
      if ($ct == 'Smart Animal') {
        $entity->field_gear_type->target_id = 30;
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function eldrich_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // If this is a subsequent step of a multi-step form, the prepopulate values
  // have done their work, and the user may have modified them: bail.
  if (isset($_REQUEST['source']) || isset($_REQUEST['campaign'])) {
    if (!empty($form_state->rebuild_info)) {
      return;
    }
    $form['#after_build'][] = 'eldrich_prepopulator_after_build';
  }
}

/**
 * If someone creates content with an 'Add an X' button, prepopulate the campaign
 * or source field and disable it so it can't be monkeyed with.
 */
function eldrich_prepopulator_after_build($form) {
  if (isset($_REQUEST['source'])) {
    $source_id = (int) $_REQUEST['source'];
    if ($node = Node::load($source_id)) {
      if (in_array($node->bundle(), ['campaign', 'inspiration'])) {
        if (isset($form['field_sources'])) {
          $form['field_sources']['widget'][0]['target_id']['#value'] = $node->id();
          $form['field_sources']['widget'][0]['target_id']['#default_value'] = $node->id();
          $form['field_sources']['widget'][0]['target_id']['#attributes']['disabled'] = TRUE;
          $form['field_sources']['widget'][0]['quantity']['#attributes']['disabled'] = TRUE;
          $form['field_sources']['widget']['add_more']['#attributes']['disabled'] = TRUE;
        }
      }
    }
  }
  if (isset($_REQUEST['campaign'])) {
    $campaign_id = (int) $_REQUEST['campaign'];
    if ($node = Node::load($campaign_id)) {
      if ($node->bundle() == 'campaign') {
        if (isset($form['field_campaign'])) {
          $form['field_campaign']['widget']['#value'] = $node->id();
          $form['field_campaign']['widget']['#default_value'] = $node->id();
          $form['field_campaign']['widget']['#attributes']['disabled'] = TRUE;
        }
      }
    }
  }
  return $form;
}

function eldrich_delete_orphaned_ecks($delete_entities = FALSE) {
  // We're looking for ECK entities unlinked by any muse, morph, status, identity,
  // equipped-* or native-* fields. Just nuke 'em then.

  $types = [
    'instance' => [
      'muse' => ['node__field_muse' => 'field_muse_target_id'],
      'morph' => ['node__field_morph' => 'field_morph_target_id'],
      'armor_instance' => ['node__field_equipped_armor' => 'field_equipped_armor_target_id'],
      'weapon_instance' => ['node__field_equipped_weapons' => 'field_equipped_weapons_target_id']
    ],
    'component' => [
      'stage' => ['node__field_stages' => 'field_stages_target_id'],
      'status' => ['node__field_status' => 'field_status_target_id'],
      'identity' => ['node__field_identity' => 'field_identity_target_id'],
      'native_ability' => ['node__field_native_abilities' => 'field_native_abilities_target_id'],
      'native_attack' => ['node__field_native_attacks' => 'field_native_attacks_target_id'],
    ]
  ];

  $delete = [
    'instance' => [],
    'component' => [],
  ];

  $db = \Drupal::database();

  foreach ($types as $type => $bundles) {
    foreach ($bundles as $bundle => $joins) {
      foreach ($joins as $table_2 => $column) {
        $query = $db->select($type, 't1');
        $query->condition('t1.type', $bundle);
        $query->leftJoin($table_2, 't2', 't1.id = t2.' . $column);
        $query->addField('t1', 'id');
        $query->isNull('t2.entity_id');

        $results = $query->execute()->fetchCol();
        $delete[$type] = array_merge($delete[$type], array_values($results));
      }
    }
  }

  foreach ($delete as $type => $ids) {
    $ids = array_unique($ids);
    sort($ids);
    if ($delete_entities) {
      $controller = \Drupal::entityManager()->getStorage($type);
      $entities = $controller->loadMultiple($ids);
      $controller->delete($entities);
      drush_print_r('Deleted ' . count($ids) . ' orphaned entities.');
    }
    else {
      drush_print_r(join(', ', $ids));
    }
  }
}


// It's not super-clear when 'now' is in Eclipse Phase, but we'll
// make a best guess and use an offset that puts us a bit past 10AF:
// Jul 4 2005, the UTC Time of Deep Impact's contact with its target
// https://www.nasa.gov/mission_pages/deepimpact/timeline/index.html
function eldrich_af_time($timeStamp = 0, $precision = 2) {

  $fall = 1120455926;
  $time = $timeStamp - $fall;

  $af[] = $time/31556926 % 12;  // to get year
  $af[] = $time / 604800 % 52;  // to get weeks
  $af[] = $time / 3600 % 24;    // to get hours
  $af[] = $time / 60 % 60;      // to get minutes
  $af[] = $time % 60;        // to get seconds

  $af = array_slice($af, 0, $precision);

  return 'AF' . join('.', $af);
}


function make_obscured_name($value, $salt = 0) {
  $hash = hash('md2', (string)$value . (string)$salt);
  preg_match("/\D\d\d/", $hash, $output_array);
  $str = str_split(array_pop($output_array));

  $nato_alpha = [
    'a' => 'alfa',
    'b' => 'bravo',
    'c' => 'charlie',
    'd' => 'delta',
    'e' => 'echo',
    'f' => 'foxtrot',
    'g' => 'golf',
    'h' => 'hotel',
    'i' => 'india',
    'j' => 'juliett',
    'k' => 'kilo',
    'l' => 'lima',
    'm' => 'mike',
    'n' => 'november',
    'o' => 'oscar',
    'p' => 'papa',
    'q' => 'quebec',
    'r' => 'romeo',
    's' => 'sierra',
    't' => 'tango',
    'u' => 'uniform',
    'v' => 'victor',
    'w' => 'whiskey',
    'y' => 'yankee',
    'z' => 'zulu'
  ];
  $nato_number = [
    '0' => 'zero',
    '1' => 'one',
    '2' => 'two',
    '3' => 'three',
    '4' => 'four',
    '5' => 'five',
    '6' => 'six',
    '7' => 'seven',
    '8' => 'eight',
    '9' => 'niner'
  ];
  $color_number = [
    '0' => 'black',
    '1' => 'blue',
    '2' => 'brown',
    '3' => 'green',
    '4' => 'indigo',
    '5' => 'jade',
    '6' => 'orange',
    '7' => 'pink',
    '8' => 'purple',
    '9' => 'violet'
  ];

  $str[0] = $nato_alpha[$str[0]];
  $str[1] = $nato_number[$str[1]];
  $str[2] = $color_number[$str[2]];

  return join('-', $str);
}

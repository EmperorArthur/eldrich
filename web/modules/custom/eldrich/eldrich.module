<?php

/**
 * @file
 * Contains eldrich.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\node\NodeInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;

define("ELDRICH_CONTENT_PUBLIC", 0);
define("ELDRICH_CONTENT_GM", 1);
define("ELDRICH_CONTENT_PRIVATE", 2);

/**
 * Implements hook_help().
 */
function eldrich_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the eldrich module.
    case 'help.page.eldrich':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Utils, callbacks, and more') . '</p>';
      return $output;

    default:
  }
}

function eldrich_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {
  // when Weapon Instances and Armor Instances are saved, title them.
  // Weapon Pattern: Short Weapon Name (Mod Shortnames) with [Smart Ammo features] Ammo Name

  if (($entity->getEntityType()->id() == 'instance')) {
    switch ($entity->bundle()) {
      case 'weapon_instance':
        $entity->title = $entity->field_weapon->entity->label();
        break;
      case 'armor_instance':
        $entity->title = $entity->field_armor->entity->label();
        break;
      case 'morph':
        // If the morph isn't populated, copy over the data from its template model.
        if (!$entity->field_model->isEmpty()) {
          $entity->title = $entity->field_model->entity->label();
          if ($entity->field_stats->isEmpty()) {
            $entity->field_stats = $entity->field_model->entity->field_stats->getValue();
          }
          if ($entity->field_traits->isEmpty()) {
            $entity->field_traits = $entity->field_model->entity->field_traits->getValue();
          }
          if ($entity->field_mobility_system->isEmpty()) {
            $entity->field_mobility_system = $entity->field_model->entity->field_mobility_system->getValue();
          }
          if ($entity->field_movement_speed->isEmpty()) {
            $entity->field_movement_speed = $entity->field_model->entity->field_movement_speed->getValue();
          }
          if ($entity->field_augmentations->isEmpty()) {
            $entity->field_augmentations = $entity->field_model->entity->field_augmentations->getValue();
          }
          if ($entity->field_skills->isEmpty()) {
            $entity->field_skills = $entity->field_model->entity->field_skills->getValue();
          }
        }
        break;
      case 'muse':
        // If the muse doesn't have any data, pre-populate it as a Standard Muse
        break;
    }
  }
}

function eldrich_options_list_alter(array &$options, array $context) {
  // Loop through options, look for a magic value, group on what's after it.
  $grouped = $ungrouped = [];
  $delimiter = 'â€”';
  foreach ($options as $key => $value) {
    if (strpos($value, $delimiter)) {
      $pair = explode($delimiter, $value);
      $group = trim(end($pair));
      $label = trim(reset($pair));
      $grouped[$group][$key] = $label;
    }
    else {
      $ungrouped[$key] = $value;
    }
  }

  $options = [];
  if (!empty($grouped)) {
    if ((count($grouped) == 1) && empty($ungrouped)) {
      $options += reset($grouped);
    }
    else {
      $options += $grouped;
    }
  }
  if (!empty($ungrouped)) {
    $options += $ungrouped;
  }
}

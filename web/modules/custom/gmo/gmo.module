<?php

/**
 * @file
 * Hides nodes from normal users if they're marked as GM-Only.
 *
 * @see gmo_node_grants()
 */

use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\field\Entity\FieldConfig;
use Drupal\node\NodeTypeInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_node_grants().
 *
 * Provides three grant realms:
 * - gmo_author: Grants users view, update, and delete privileges
 *   on nodes they have authored. Users receive a group ID matching their user
 *   ID on this realm.
 * - gmo: Grants users view privileges when they have the
 *   'access gm content' permission. Users with this permission receive a
 *   group IDs for the realm 1337.
 *
 * @see gmo.permissions.yml
 * @see gmo_node_access_records()
 */
function gmo_node_grants($account, $op) {
  $grants = array();

  $grants['gmo_author'] = array($account->id());

  if ($op == 'view' && $account->hasPermission('access gm content', $account)) {
    $grants['gmo'] = array(1337);
  }

  return $grants;
}

/**
 * Implements hook_node_access_records().
 *
 * We only write out records for nodes with field_gm_only set to TRUE. The
 * Node module writes the default global view grant for nodes that are not
 * marked GM-only.
 *
 * @see \Drupal\node\Tests\NodeAccessBaseTableTest::setUp()
 * @see gmo_node_grants()
 * @see gmo.permissions.yml
 */
function gmo_node_access_records(NodeInterface $node) {
  $grants = array();

  if ($node->hasField('field_gm_only') && $node->field_gm_only->value) {
    $grants[] = array(
      'realm' => 'gmo',
      'gid' => 1337,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
      'langcode' => 'en',
    );

    // For the author realm, the group ID is equivalent to a user ID, which
    // means there are many many groups of just 1 user.
    $grants[] = array(
      'realm' => 'gmo_author',
      'gid' => $node->getOwnerId(),
      'grant_view' => 1,
      'grant_update' => 1,
      'grant_delete' => 1,
      'priority' => 0,
      'langcode' => 'en',
    );
  }

  return $grants;
}

/**
 * Implements hook_node_access().
 *
 * If content is being viewed, the node type has a GM flag, the user is NOT
 * the author, the user DOES NOT have a GM account, and the node IS flagged
 * as GM-only… return forbidden. Otherwise, return neutral.
 */
function gmo_node_access(NodeInterface $node, $op, AccountInterface $account) {
  if ($op == 'view' && $node->hasField('field_gm_only')) {
    if (!$account->hasPermission('access gm content')
      && ($account->id() != $node->getOwnerId())
      && ($node->field_gm_only->value)
    ) {
      return AccessResult::forbidden()->setCacheMaxAge(0);
    }
  }
  // No opinion.
  return AccessResult::neutral()->setCacheMaxAge(0);
}

// Add a special note to page titles of GM-only nodes, so visitors know
// not to share them.
function gmo_preprocess_page_title(&$variables) {
  if ($variables['title']) {
    if ($node = \Drupal::routeMatch()->getParameter('node')) {
      if ($node->hasField('field_gm_only') && $node->field_gm_only->value) {
        $new_title = $node->label() . " <span class='badge'>GM’s Eyes Only</span>";
        $variables['title'] = \Drupal\Core\Render\Markup::create($new_title);
      }
    }
  }
}
